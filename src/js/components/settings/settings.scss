@use 'sass:math';

$button-size: 2.75rem;
$menu-padding: .75rem;
$swatch-size: 2.75rem;
$toggle-padding: .125rem;
$toggle-size: 1.25rem;

*,
*::before,
*::after {
  box-sizing: border-box;
}

// The dialog.
// [1] Required by Safari for open/close transitions.
dialog {
  background-color: var(--background-1);
  border: 0;
  border-radius: 1rem;
  box-shadow: var(--box-shadow);
  display: block; // [1]
  inset-block: auto 5dvw;
  max-inline-size: 90dvw;
  padding: 0;
  transition: opacity var(--transition), transform var(--transition);

  &[inert] {
    opacity: 0;
    pointer-events: none;
    transform: translateY(100%);
  }

  &::backdrop {
    background-color: transparent;
  }
}

// Prevent background content from scrolling when dialog is open.
html:has(dialog[open]) {
  overflow: hidden;
}

// All settings in a standard <form> element.
form {
  display: grid;
  gap: $menu-padding;
  grid: '. .' 'swatches swatches' / 1fr 1fr;
  padding-block: $menu-padding;
}

// Theme swatches.
ul {
  display: flex;
  gap: .375rem;
  grid-area: swatches;
  list-style: none;
  margin: 0;
  overflow: auto hidden;
  padding-inline: $menu-padding;
  scrollbar-width: none;
  transition: opacity var(--transition);

  &[aria-disabled] {
    opacity: .25;
    pointer-events: none;
  }

  &::-webkit-scrollbar {
    display: none;
  }
}

// Override defaults for radio buttons and checkboxes.
input {
  appearance: none;
  cursor: pointer;
  margin: 0;
  outline: 0;
  padding: 0;
}

// [1] Default border color should match background color of the dialog since
// the border also acts as a focus indicator since an outline in Safari doesn't
// inherit the border-radius of the active element.
[type='radio'] {
  block-size: $swatch-size;
  border: 3px solid var(--background-1); // [1]
  border-radius: math.div($swatch-size, 2);
  display: grid;
  grid: 'content';
  inline-size: $swatch-size;
  overflow: hidden;

  &:focus {
    border-color: var(--outline);
  }

  @media (any-hover: hover) {
    transition: border-color var(--transition);

    &:hover {
      border-color: var(--text);
    }
  }

  &::before,
  &::after {
    content: '';
    display: block;
    grid-area: content;
  }

  &::before {
    background-color: var(--theme);
  }

  // Checkmark overlaid on selected swatch.
  &:checked::after {
    block-size: .75rem;
    border-block-end: 3px solid var(--on-theme);
    border-inline-start: 3px solid var(--on-theme);
    inline-size: 1.25rem;
    place-self: center;
    transform: rotate(-45deg) translate3d(.125rem, -.125rem, 0);
  }
}

// Labels contain a <span> containing text and a checkbox.
label {
  align-items: center;
  color: var(--text);
  cursor: pointer;
  display: grid;
  gap: 0 1rem;
  grid: 'text toggle' / 1fr auto;
  padding-inline: 1rem .75rem;
}

label > span {
  font-size: .875rem;
  font-variation-settings: 'wght' 600;
  grid-area: text;
}

// Toggle switches via checkboxes.
input[type='checkbox'] {
  block-size: ($toggle-size + ($toggle-padding * 2));
  border: 3px solid transparent;
  border-radius: ($toggle-size + ($toggle-padding * 2));
  box-sizing: content-box;
  display: grid;
  grid: 'content';
  grid-area: 'toggle';
  inline-size: ($toggle-size * 2) + ($toggle-padding * 2);
  overflow: hidden;

  &:focus {
    border-color: var(--outline);
  }

  &::before,
  &::after {
    content: '';
    display: block;
    grid-area: content;
  }

  &::before {
    background-color: var(--background-2);
    transition: background-color var(--transition);
  }

  &:checked::before {
    background-color: var(--green);
  }

  &::after {
    align-self: center;
    background-color: white;
    block-size: $toggle-size;
    border-radius: $toggle-size;
    content: '';
    display: block;
    inline-size: $toggle-size;
    margin-inline-start: $toggle-padding;
    transition: margin-inline-start var(--transition);
  }

  &:checked::after {
    margin-inline-start: ($toggle-size + $toggle-padding);
  }
}

// Theming for radio button swatches.
[value] {
  --on-theme: rgb(28, 28, 30);  // Gray6 dark.
}

[value='red'] { --theme: var(--red); }
[value='orange'] { --theme: var(--orange); }
[value='yellow'] { --theme: var(--yellow); }
[value='green'] { --theme: var(--green); }
[value='mint'] { --theme: var(--mint); }
[value='teal'] { --theme: var(--teal); }
[value='cyan'] { --theme: var(--cyan); }
[value='blue'] { --theme: var(--blue); }
[value='indigo'] { --theme: var(--indigo); }
[value='purple'] { --theme: var(--purple); }
[value='brown'] { --theme: var(--brown); }
[value='default'] { --theme: var(--default); }

:is([value='indigo'], [value='pink'], [value='red']) {
  --on-theme: rgb(242, 242, 247);  // Gray6 light.
}

@media (prefers-color-scheme: dark) {
  [value='default'] {
    --on-theme: rgb(242, 242, 247);  // Gray6 light.
  }
}
